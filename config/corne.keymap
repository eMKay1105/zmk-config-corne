/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>

&nice_view_spi { cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>; };

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
        };

        bspdel: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        krlt: key_repeat_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "KEY_REPEAT_LAYER_TAP";
            bindings = <&mo>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        dtb: double_tap_boot {
            compatible = "zmk,behavior-tap-dance";
            label = "DOUBLE_TAP_BOOT";
            #binding-cells = <0>;
            bindings = <&none>, <&bootloader>;
        };

        bspdellt: backspace_delete_layertap {
            compatible = "zmk,behavior-hold-tap";
            label = "BACKSPACE_DELETE_LAYERTAP";
            bindings = <&mo>, <&bspdel>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&none  &kp Q            &kp W            &kp F              &kp P                &kp B        &kp J        &kp L                 &kp U               &kp Y             &kp LBKT          &kp SEMI
&none  &hml LEFT_GUI A  &hml LEFT_ALT R  &hml LEFT_SHIFT S  &hml LEFT_CONTROL T  &kp G        &kp M        &hmr RIGHT_CONTROL N  &hmr RIGHT_SHIFT E  &hmr RIGHT_ALT I  &hmr RIGHT_GUI O  &kp APOS
&none  &lt 7 Z          &kp X            &kp C              &kp D                &kp V        &kp K        &kp H                 &kp COMMA           &kp DOT           &lt 7 SLASH       &kp MINUS
                                         &lt 5 ESCAPE       &lt 3 SPACE          &lt 6 TAB    &lt 2 ENTER  &krlt 1 0             &bspdellt 4 0
            >;
        };

        num {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none    &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &none  &to 0              &none            &none          &dtb           &none
&bspdel  &kp SEMI   &kp N4  &kp N5   &kp N6  &kp EQUAL    &none  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_GUI  &none
&none    &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &none  &none              &none            &none          &none          &none
                            &kp DOT  &kp N0  &kp MINUS    &none  &none              &none
            >;
        };

        sym {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&none                 &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp RIGHT_BRACE    &none  &to 0              &none            &none          &dtb           &none
&kp NON_US_HASH       &kp COLON       &kp DOLLAR       &kp PERCENT   &kp CARET             &kp PLUS           &none  &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_GUI  &none
&kp NON_US_BACKSLASH  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp PIPE           &none  &none              &none            &none          &none          &none
                                                       &kp ASTERISK  &kp LEFT_PARENTHESIS  &kp LS(SLASH)      &none  &none              &none
            >;
        };

        nav {
            bindings = <
&none    &dtb          &none         &none           &to 0             &none     &kp C_AC_REDO  &kp C_AC_PASTE  &kp C_AC_COPY   &kp C_AC_CUT  &kp C_AC_UNDO  &none
&bspdel  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &none     &kp CAPSLOCK   &kp LEFT_ARROW  &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT      &none
&none    &none         &trans        &trans          &trans            &trans    &kp INSERT     &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END        &none
                                     &none           &none             &none     &kp ENTER      &none           &key_repeat
            >;
        };

        fun {
            bindings = <
&none  &kp F12  &kp F7  &kp F8              &kp F9     &kp PRINTSCREEN    &none  &to 0      &none      &none     &dtb      &none
&to 8  &kp F11  &kp F4  &kp F5              &kp F6     &kp SCROLLLOCK     &none  &kp RCTRL  &kp RSHFT  &kp RALT  &kp RGUI  &to 8
&none  &kp F10  &kp F1  &kp F2              &kp F3     &kp PAUSE_BREAK    &none  &none      &none      &none     &none     &none
                        &kp K_CONTEXT_MENU  &kp SPACE  &kp TAB            &none  &none      &none
            >;
        };

        media {
            bindings = <
&none  &dtb          &none         &none           &to 0             &none    &none              &none             &none              &none            &none         &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &none    &ext_power EP_TOG  &kp C_PREVIOUS    &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &bt BT_CLR
&none  &none         &none         &none           &none             &none    &out OUT_TOG       &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4
                                   &none           &none             &none    &kp C_STOP         &kp C_PLAY_PAUSE  &kp C_MUTE
            >;
        };

        mouse {
            bindings = <
&none  &dtb          &none         &none           &to 0             &none    &kp C_AC_REDO  &kp C_AC_PASTE  &kp C_AC_COPY  &kp C_AC_CUT  &kp C_AC_UNDO  &none
&none  &kp LEFT_GUI  &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &none    &none          &none           &none          &none         &none          &none
&none  &none         &none         &none           &none             &none    &none          &none           &none          &none         &none          &none
                                   &none           &none             &none    &mkp RCLK      &mkp LCLK       &mkp MCLK
            >;
        };

        button {
            bindings = <
&none    &kp C_AC_UNDO  &kp C_AC_CUT  &kp C_AC_COPY   &kp C_AC_PASTE    &kp C_AC_REDO    &kp C_AC_REDO  &kp C_AC_PASTE     &kp C_AC_COPY    &kp C_AC_CUT   &kp C_AC_UNDO  &none
&bspdel  &kp LEFT_GUI   &kp LEFT_ALT  &kp LEFT_SHIFT  &kp LEFT_CONTROL  &none            &none          &kp RIGHT_CONTROL  &kp RIGHT_SHIFT  &kp RIGHT_ALT  &kp RIGHT_GUI  &none
&none    &kp C_AC_UNDO  &kp C_AC_CUT  &kp C_AC_COPY   &kp C_AC_PASTE    &kp C_AC_REDO    &kp C_AC_REDO  &kp C_AC_PASTE     &kp C_AC_COPY    &kp C_AC_CUT   &kp C_AC_UNDO  &none
                                      &mkp MCLK       &mkp LCLK         &mkp RCLK        &mkp RCLK      &mkp LCLK          &mkp MCLK
            >;
        };

        gaming {
            bindings = <
&kp ESCAPE  &kp TAB           &kp Q  &kp W  &kp E      &kp R    &kp KP_NUMLOCK  &kp KP_NUMBER_7  &kp KP_NUMBER_8  &kp KP_NUMBER_9  &none  &to 9
&kp M       &kp LEFT_SHIFT    &kp A  &kp S  &kp D      &kp F    &none           &kp KP_NUMBER_4  &kp KP_NUMBER_5  &kp KP_NUMBER_6  &none  &none
&kp J       &kp LEFT_CONTROL  &kp I  &none  &kp C      &kp G    &none           &kp KP_NUMBER_1  &kp KP_NUMBER_2  &kp KP_NUMBER_3  &none  &to 0
                                     &to 9  &kp SPACE  &none    &none           &none            &to 0
            >;
        };

        gaming2 {
            bindings = <
&trans  &kp TAB    &trans  &kp W   &trans     &trans    &kp F1  &kp F2  &kp F3  &kp F4  &kp F5  &kp F6
&trans  &kp LSHFT  &kp A   &kp S   &kp D      &trans    &kp N1  &kp N2  &kp N3  &kp N4  &kp N5  &kp F7
&trans  &kp LCTRL  &trans  &trans  &trans     &trans    &trans  &trans  &trans  &trans  &trans  &kp F8
                           &to 8   &kp SPACE  &trans    &trans  &trans  &to 0
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
